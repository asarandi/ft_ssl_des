/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   des.c                                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: asarandi <asarandi@student.42.us.org>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2017/11/17 16:55:34 by asarandi          #+#    #+#             */
/*   Updated: 2017/11/17 19:57:27 by asarandi         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../ft_printf/libftprintf.h"
#include "des.h"

typedef	unsigned long	t_ul;
typedef unsigned char	t_uc;

unsigned long	make_pc1(unsigned long k)
{
	unsigned long	result;
	unsigned long	tmp;
	int				i;

	result = 0;
	i = 0;
	while (i < 56)
	{
		tmp = (k >> (64 - g_pc1_table[i])) & 1;
		result <<= 1;
		result += tmp;
		i++;
	}
	result <<= 8;
	return (result);
}

unsigned long	circular_shift_left(unsigned long key, int bits)
{
	unsigned long	result;
	unsigned long	tmp;
	unsigned long	fullbits;

	tmp = bits;
	fullbits = 0;
	while (tmp--)
		fullbits = (fullbits << 1) + 1;
	tmp = (key >> (bits - 1)) & 1;
	result = ((key << 1) + tmp) & fullbits;
	return (result);
}

void	make_half_keys(unsigned long half_keys[16], unsigned long starter)
{
	unsigned char	shift;
	unsigned long	new_half;
	int				i;

	i = 0;
	while (i < 16)
	{
		shift = g_left_shifts[i];
		while (shift--)
		{
			new_half = circular_shift_left(starter, 28);
			starter = new_half;
		}
		half_keys[i] = new_half;
		i++;
	}
}

unsigned long	make_pc2(unsigned long c_half, unsigned long d_half)
{
	t_ul	before;
	t_ul	after;
	int		i;

	before = (c_half << 28) + d_half;
	i = 0;
	after = 0;
	while (i < 48)
	{
		after <<= 1;
		after += ((before >> (56 - g_pc2_table[i])) & 1);
		i++;
	}
	return (after);
}

void	make_keys(t_ul keys[16], t_ul c_half[16], t_ul d_half[16])
{
	int	i;

	i = 0;
	while (i < 16)
	{
		keys[i] = make_pc2(c_half[i], d_half[i]);
		i++;
	}
}

unsigned long	make_ip1(unsigned long m)
{
	unsigned long	result;
	int				i;

	i = 0;
	result = 0;
	while (i < 64)
	{
		result <<= 1;
		result += (m >> (64 - g_ip1_table[i])) & 1;
		i++;
	}
	return (result);
}

unsigned long	make_ebit(unsigned long r0)
{
	unsigned long	result;
	unsigned long	tmp;
	int				i;

	i = 0;
	result = 0;
	while (i < 48)
	{
		tmp = (r0 >> (32 - g_ebit_table[i])) & 1;
		result <<= 1;
		result += tmp;
		i++;
	}
	return (result);
}

unsigned long	get_s_boxes_value(unsigned long xor0)
{
	int		i;
	int		row;
	int		col;
	t_ul	tmp;
	t_ul	result;

	i = 0;
	result = 0;
	while(i < 8)
	{
		tmp = (xor0 >> (42 - (i * 6))) & 0x3f;
		row = ((tmp >> 5) << 1) + (tmp & 1);
		col = (tmp >> 1) & 0xf;
		tmp = g_s_boxes[i][row * 16 + col];
		result <<= 4;
		result += tmp;
		i++;
	}
	return (result);
}

unsigned long	make_pperm(unsigned long sb0)
{
	int				i;
	unsigned long	tmp;
	unsigned long	result;

	i = 0;
	result = 0;
	while (i < 32)
	{
		tmp = (sb0 >> (32 - g_pperm_table[i])) & 1;
		result <<= 1;
		result += tmp;
		i++;
	}
	return (result);
}

unsigned long	make_ip2(unsigned long rxlx)
{
	int				i;
	unsigned long	tmp;
	unsigned long	result;

	i = 0;
	result = 0;
	while (i < 64)
	{
		tmp = (rxlx >> (64 - g_ip2_table[i])) & 1;
		result <<= 1;
		result += tmp;
		i++;
	}
	return (result);
}

int main()
{
	unsigned long m = 0x0123456789ABCDEF;
	unsigned long m_ip;
	unsigned long k = 0x133457799BBCDFF1;
	unsigned long kp;

	unsigned long c_half_keys[16];
	unsigned long d_half_keys[16];
	unsigned long keys[16];
	unsigned long er0;
	unsigned long sb0;
	unsigned long pp0;
	t_ul	l0;
	t_ul	r0;
	t_ul	r1;
	t_ul	result;
	int	i;

	kp = make_pc1(k);
	make_half_keys(c_half_keys, (kp >> 36) & 0xfffffff);
	make_half_keys(d_half_keys, (kp >> 8) & 0xfffffff);
	make_keys(keys, c_half_keys, d_half_keys);

	ft_printf("message is %064lb\n", m);
	m_ip = make_ip1(m);
	ft_printf("  after ip %064lb\n", m_ip);

	l0 = (m_ip >> 32) & 0xffffffff;
	r0 = m_ip & 0xffffffff;

	i = 0;
	while (i < 16)
	{
		er0 = make_ebit(r0); //expand r0 to 48 bits
		sb0 = get_s_boxes_value(er0 ^ keys[i]);       //back to 32 bits using s-boxes
		pp0 = make_pperm(sb0); //end of f-function
		r1 = l0 ^ pp0;
		l0 = r0;
		r0 = r1;
		i++;
	}
	result = (r1 << 32) + l0;
	result = make_ip2(result);
	ft_printf("result   is: %064lb\n", result);
	ft_printf("HEX is: %lX\n", result);

}
